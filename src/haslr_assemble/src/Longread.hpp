/*****************************************************
 * Author: Ehsan Haghshenas (ehaghshe AT sfu DOT ca) *
 *****************************************************/

#ifndef __LONGREAD__
#define __LONGREAD__

#include <string>
#include <vector>
#include <stdint.h>
#include "Compressed_sequence.hpp"
#include "Contig.hpp"

using namespace std;

typedef struct
{
    uint32_t q_id;
    uint32_t q_len;
    uint32_t q_start;
    uint32_t q_end;
    uint32_t t_id; // name of contig generated by Minia
    uint32_t t_len;
    uint32_t t_start;
    uint32_t t_end;
    uint32_t n_match; // number of matches in the alignment block
    uint32_t n_block; // number of bases in the alignment block
    uint8_t  is_rev;
    uint8_t  mapq;
    string   cigar;
} Align_Seq2_t;

typedef struct
{
    uint32_t q_id;
    uint32_t q_start;
    uint32_t q_end;
    uint32_t t_id; // name of contig generated by Minia
    uint32_t t_start;
    uint32_t t_end;
    uint32_t n_match; // number of matches in the alignment block
    uint32_t n_block; // number of bases in the alignment block
    uint8_t  is_rev;
    uint8_t  mapq;
    uint8_t  flag; // used for graph traversal
    uint32_t cigar_len;
    char    *cigar;
} Align_Seq_t;

typedef struct
{
    uint32_t     len;
    uint32_t     comp_len;
    uint8_t     *comp_seq;
    Align_Seq_t *contig_aln;
    uint32_t     contig_aln_num;
} Longread_t;

typedef struct
{
    Longread_t  *reads;
    uint64_t     reads_size;
    uint64_t     reads_cap;
    uint64_t     reads_increment;
    uint8_t     *seqs;
    uint64_t     seqs_size;
    uint64_t     seqs_cap;
    uint64_t     seqs_increment;
    Align_Seq_t *alignments;
    uint64_t     alignments_size;
    uint64_t     alignments_cap;
    uint64_t     alignments_increment;
    char        *cigars;
    uint64_t     cigars_size;
    uint64_t     cigars_cap;
    uint64_t     cigars_increment;
} Longread_List_t;

void initialize_longread(Longread_List_t &lr_list);
void load_longread_comments(string path, vector<string> &comm_list);
void load_longread_compressed(string path, Longread_List_t &lr_list);
void load_longread_compressed_fofn(string path, Longread_List_t &lr_list);
void load_alignment(string path, Contig_List_t &contig_list, Longread_List_t &lr_list);
void load_alignment_fofn(string path, Contig_List_t &contig_list, Longread_List_t &lr_list);
void write_longread_index(string path, Longread_List_t &lr_list);
void read_longread_index(string path, Longread_List_t &lr_list);
void finalize_longread(Longread_List_t &lr_list);
void update_longreads(Longread_List_t &lr_list);
void build_compact_longreads(Longread_List_t &lr_list, vector<vector<Align_Seq_t*> > &compact_lr_list, Contig_List_t &contig_list, uint32_t min_aln_block, uint32_t copy_count);
// void fix_alignments_MT(Longread_List_t &lr_list);
void fix_alignments(Longread_List_t &lr_list);
void print_compact_longreads(vector<vector<Align_Seq_t*> > &compact_lr_list, string path);
void print_loaded_lrs(Longread_List_t &lr_list);
void print_loaded_alignments(Longread_List_t &lr_list, string logpath);

#endif // __LONGREAD__
